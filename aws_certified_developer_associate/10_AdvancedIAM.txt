Web Identity Federation
  Simplifies authentication and authorization for web applications

  User Access to AWS Resources: Users access AWS resources after successfully authenticating with a web-based identity provider like Facebook, Amazon, or Google
  Authentication: Following successful authentication users receive an authentication code from the web ID provider
  Authorization: Users can trade this authentication code for temporary AWS Secruity credentials, authorizing access to AWS resources.

  Web ID Federation with Amazon Cognito
    Amazon Cognito: Provides web ID federation including sign-up and sign-in functionality for your applications and access for guest users
    Identity Broker: Manages authentication between your application and web ID providers, so you don't need to write any additional code.
    Multipler Devices: Synchornizes user data for multiple devices. 
    Recommended for Mobile: Recommended for all mobile applications that call AWS services.

  Amazon Cognito Use Case:
    Web Identity federation using social media accounts like facebook

  Authentication with Amazon Cognito
    Temporary Credentials: Cognito borkers between the app and Facebook, Amazon or Google to provide temporary credentials
    IAM Role: The temporary credentials map to an IAM role, allowing access to the required resources.
    Secure and Seamless: No need for the aplication to embed or store AWS credentials locally on the device.
    Cognito gives users a seamless experience across all devices

  Cognito User Pools and Identity Pools
    User Pools: User directories used to manage sign-up and sign-in functionality for mobile and web applications
    Sign-In: Users can sign-in directly to the User Pool or using Facebook, Amazon, or Google
    Identity Pools: Identity pools enable you to provide temporary AWS credentials. Enabling access to AWS services like S3 or dynamoDB

  Amazon Cognito User Pool and Identity Pool Workflow
    Facebook <-> user pool <-> JWT token <-> AWS Credentials through Identity POol

  Cognito Push Synchronization: Synchronization across devices
    Devices: Cognito tracks the association between user identity and the various different devices they sign-in from.
    Seamless: Cognito uses push synchronization to push updates and synchronize user data across multiple devices.
    SNS silent notification: SNS notification to all the devices associated with a given user identity whenver data stored in the cloud changes.

  User Pools: 
    User directories used to manage sign up and sign in functionality for mobile and web applications

  Identity Pools:
    Identity pools enable you to provide temporary AWS credentials
    Enabling access to AWS services

  Cognito Push Synchronization uses SNS to send a silent push notificaiton of user data updates to multiple devices associated with a single user ID.

  Cognito User Pool Demo - Do this for carkeepers and Auribus
    Create a cognito user pool
    Configure sign-up and sign-in 
    Sign up a user
    View the JWT token

  Cognito Identity Demo
    Create an IAM user
    Create a dynamoDB table
    Create an ec2 instance
    Create a cognito identity pool and IAM role
    Configure our website

Inline, AWS Managed, and Customer Managed Policies
  Identity Access Management: Used to define user access permissions within AWS
    AWS Managed Policies: An IAM policy that is administered by AWS, common use cases
    Customer Managed Policies: 
      Created by you
      Copy an existing policy
    Inline Policies
      1:1 Relationship between entity and the policy
      Embedded: When you delete the user, the policy will also be deleted
      Single User, Group or Role

      AWS recommends using managed policies over inline policies

  Demo: 

STS AssumeRoleWithWebIdentity
  STS API: assume-role-with-web-identity is an API provided by STS (Security token service)
  Temporary Credentials: Returns temporary security credentials for users authenticated by a mobile or web application using a web ID provider like Amazon, Facebook, etc.
  Web Applications: Regular web applications can use the assume-role-with-web-identity API. For mobile apps, Cognito is recommended.

  Exam Tips:
    STS: Part of the Security Token service
    Authentication: Allows users who ahve authenticated with a web identity provider to access AWS resources.
    API Call: After the user has authenticated, the application makes the assume-role-with-web-identity API call.
    Temporary Credentials:
    AssumedRoleUser: Within AssumedRoleUser, the ARN and AssumedRoleID are used to programmatically reference the temporary credentials, not an IAM role or user.

Configuring Cross-Account Access
  Delegate access to resources in different AWS accounts that you own.

  Many companies have Production and Dev accounts

  Manage Resources in other accounts: Share resources in one account with users in a different account.
  IAM Role: Create a role in one account to allow access and grant permissions to users in a different account
  Switch Roles within the AWs management console. No password is required.

Advanced IAM Summary:
  STS: Part of the Security Token service
  Authentication: Allows users who have authenticated with a web identity provider to access AWS Resources
  API Call: After the user has authenticated, the application makes the assume-role-with-web-identity API call.
  Temporary Credentials: If successful, STS will return temporary credentials enabling access to AWS resources
  AssumedRoleUser: Within AssumedRoleUser, the arn and AssumedRoleID are used to programmatically reference the temporary credentials, not an IAM role or user.

  Cognito
    Cognito: Acts as an identity broker, handling all interaction with web identity providers.
    User Sign-UP: Provides sign-up, sign-in, and guest user access.
    Best Practice for Mobile Apps: Cognito is the AWS recommended approach for web ID federation for mobile applications.

    Cognito Push Synchronization uses SNS to send a silent push notification of user data updates to multiple devices associated with a single user ID.

    User Pools:
      User directories used to manage sign-up and sign-in functionality for mobile and web applications

    Idenity Pools:
      Identity pools enable you to provide temporary AWS credentials
      Enabling access to AWS services like S3 or dynamoDB

    Inline, AWS Managed, and Customer Managed Policies
      AWS: Managed default policies
      Cusomter Managed policies can be assigned to any number of entities and is managed by you.
      Inline Policy: Managed by you and embedded in a single entity (user, group or role) [Not preferred]

    Cross-Account Access
      Create IAM group in Dev account
      Create an S3 bucket in prod account
      Create IAM policy in prod and attach to role
      Associate role with dev account_id
