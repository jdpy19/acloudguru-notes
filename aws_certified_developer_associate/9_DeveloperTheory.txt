Introduction to CI/CD
  What is CI/CD?
    Software Development Best Practice
      continuous integration, continuous delivery/deployment
    Make small changes & automate everything!
      Small, incremental code changes. Autoamte as much as possible
        Code integration, build, test, and deployment

    Why is it so cool?
      Modern companies like AWS, Netflix, Google and Facebook have pioneered this approach to releasing code, successfully applying thousands of changes per day.

  Benefits of the CI/CD Approach
    Automation is good! Fast, repeatable, scalable, enables rapid deployment
    Manual is bad! Slow, error prone, inconsistent, unscalable, complex
    Small Changes: Test each code change and catch bugs while they are small and simple to fix.

  Continuous Integration Workflow
    Shared Code Repository: Multipler developers contributing to a shared code repository like Git. Frequently mergin or integrating code updates.
    Automated Build: When changes appear in the code repository this triggers an automated build of the new code.
    Automated Test: 

  Continuous Delivery & Deployment Workflow
    Code is Merged: After successful tests, the code gets merged to the master repository
    Prepared For Deployment: Code is built, tested and packaged for deployment
    Manual decision(continuous delivery) or fully automated (continuous deployment)

  AWS Developer Tools
    CodeCommit: Source & Version Control
      Source control service enabling teams to collaborate on code, html pages, scripts, images and binaries
    CodeBuild: Automated build service
      Compiles source code, runs tests and produces packages that are ready to deploy
    CodeDeploy: Automated Deployment
      Automates code deployments to any instance, including EC2, Lambda and on premises
    CodePipeline: Manages the workflow
      End-to-end solution, build, test and deploy your application every time there is a code change.

  Exam Tips:
    Continuous integration: Integrating or mergin the code changes frequently at least once per day: CodeCommit
    Continuous Delivery: Automating the build, test and deployment functions. Think CodeBuild and CodeDeploy
    Continuous Deployment: Fully autoamted release prcoess, code is deployed into Staging or Production as soon as it is successfully passed through the release pipeline. Think CodePipeline.

CodeCommit ~ Git Repository
  CodeCommit is a central code repository
    Source code, binaries, images, libraries
    Manages updates from multipler sources. enables collaboration
    Tracks and manages code changes. Manages version history.

  Exam Tips:
    Centralized Code Repository
    Enables Collaboration
    Version Control

CodeDeploy 101
  What is CodeDeploy?
    Automated Deployment
      EC2 Instances, on-premises & Lambda
        Quickly release new features
        Avoid downtime during deployments
        Avoid the risks associated with manual processes

  CodeDeploy Deployment Approaches
    In-Place: The application is stopped on each instance and the new release is installed. Also known as Rolling Update
      CodeDeploy installs the new version, known as a Revision
      Capacity is reduced during the deployment
      Lambda is not supported
      Rolling back involves a re-deployment
      Great when deploying in the first time
    Blue/green: New instances are provisioned and the new release is installed on the new instances. Blue represents the active deployment, green is the new release.
      Blue = Current, Green = New environment
      Safest option
      No capacity reduction
      Green instances can be created ahead of time
      Easy to switch between old and new
      You pay for 2 environments until you terminate the old servers
      Just redirect Load Balancer if a rollback is required, only works if old environment hasn't been terminated.

  Exam Tips:
    In-Place
      Capacity is reduced during the deployment
      Lambda is not supported
      Rolling back involves a re-deploy
      Great for when deploying for the first time
    Blue/Green
      No capacity reduction
      Green instances can be created ahead of time
      Easy to switch between old and new
      You pay for 2 environments until you terminate the old servers

  CodeDeploy AppSpec File
    Configuration File: Defines the paramteres to be used during a CodeDeploy deployment
    EC2: For EC2 and on-prem, YAML only
    Lambda: YAML and JSON supported


    EC2 AppSpec File Structure
      Version: Reserved for future use, currently 0.0
      OS: The operating sytem
      Files: the location of any application files that need to be copied and where they should be copied to
      Hooks: Scripts which need to run at set points in the deployment life cycle, have a specifc run order

    Script Examples:
      UZip Files: Unzip application files
      Run Tests
      Deal With Load Balancing: De-register, re-register instances with a load balancer

    Typical Folder Setup:
      appspec.yml
      /Scripts
      /Config
      /Source

  CodeDeploy Lifecycle Event Hooks
    Run in a specific order

    Phase 1
      De-register instances from a Load balancer
    Phase 2
      Nuts and bolts of the application deployment
    Phase 3
      Re-register instances with load balancer.

    BeforeBlockTraffic: Tasks you want to run on instances before they are deregistered from a Load Balancer
    BlockTraffic: De-register instances from a load balancer
    AfterBlockTraffic: Tasks you want to run on instances after they are de-registered from a load balancer

    ApplicationStop: Gracefully stop the application
    DownloadBundle: CodeDeploy agent copies the application revision files to a temporary location
    BeforeInstall: Pre-installation scripts, e.g. backin up the current version, decrypting files
    Install: Copy application revision files to final location
    AfterInstall: Post-install scripts e.g. configuration file permissions
    ApplicationStart: Start any services that were stopped during ApplicationStop
    ValidateService: Run tests to validate the service

    BeforeAllowTraffic: Tasks you want to run on instances before they are registered with the Load Balancer
    AllowTraffic: Register instances with a load balancer
    AfterAllowTraffic: Tasks you want to run on instances after they are registered with a Load Balancer

  Exam Tips
    Run Order: Lifecycle event hooks are run in a specific order known as the run order
    In-Place Deployment: Broadly 3 phases: De-registering, installation, re-registering with a load balancer
    Logical Flow

  CodeDeploy Demo 
    https://github.com/ACloudGuru-Resources/course-aws-certified-developer-associate/tree/main/Code_Deploy_Demo
    Tasks
      Create an EC2 Instances
      Create an S3 bucket
      Install the CodeDeploy agent
      Deploy an application

    Prerequisites
      Service Role for EC2: Allow EC2 to accss source code in S3
      Service Role for CodeDeploy: Allow CodeDeploy to make API calls on our behalf

CodePipeline 101
  A Fully Managed CI/CD Service
    Orchestrates Build, Test, & Deployment
      The pipeline is triggered every time there is a change to your code.
    Automated Release Process
      Fast, consistent, fewer mistakes. Enables quick release of new features and bug fixes
    CodePipeline Integrates with
      CodeCommit, CodeBuild, CodeDeploy, Github, Jenkins, Elastic Beanstalk, CloudFormation, Lambda, Elastic Container Service
  Example Workflow
    CodePipleine: Workflow is defined. The workflow begins when there is a change detected in your source code.
    CodeCommit: New Code Appears. New source code appears in the COdeCommit Repository
    CodeBuild: Code is Built & tested. CodeBuild immediately compiles source code, runs tests, and produces pacakges.
    CodeDeploy: Application Deployed. The newly built application is deployed into a staging or production environment
  Exam Tips
    CI/CD: Orchestrates end to end software release processes
    Automated: Triggers your pipeline as soon as a change is detected in your source code repository
    Integrates with AWS & Third Party Tools

  Demo: https://github.com/ACloudGuru-Resources/course-aws-certified-developer-associate/tree/main/Code_Pipeline_Demo

  Tasks:
    Use CloudFormation to create an EC2 instance
    Upload version 1 of our application to S3
    Deploy the applicaiton using CodeDeploy
    Build a CodePipeline and deploy version 2.
    Configure an automated pipeline and deploy version 3

  Prerequisites
    Resources
    Configure user permissions

Setting up and AWS CodePipeline with a manual approval
  Very cool! Could use for carkeepers

Introduction to Microservices
  Traditional applications
    Monolithic: One single unit, think data team servers
    Difficult to change
    Can't make it bigger
    One small change affects the whole thing

  Microservices: An architectural and organizational approach to software development, where software is composed of small, independent services that communicate over well-defined APIs

  Modern Applications:
    Many modern applications are made up of a bunch of microservices running in containers

  Container, think Docker

  Example: 
    Shopping Cart: 
    Recommendation Engine: 
    Product Reviews: 
    Marketing Preferences: 
    These can all be seperate microservices instead of one big unit.

  3 Important Advantages
    Serviceability: Easy to fix problems
    Flexibility: Easy to make changes
    Scalability: Easy to scale

  Serviceability: 
    If one component breaks... 
      Not a disaster, the rest of the application keeps going
      Quick to fix, deploy a new instance of your microservices

  Flexibility:
    Change is easy...
      To upgrade shopping cart, simply replace microservice.
      To add new features, simply create a new microservice.
    
  Scalability:
    Scaling is easy...
      To scale the shopping cart microservice, add more containers
      Scale only the components that you need to, highly flexible and cost efficient

  Microservices enable flexibility! Most adaptable to change survives!

  A monolithic approach can be fatal! Failing to adapt as quickly as competition can be deadly.

  Exam Tips
    Microservices run in containers
    Does one thing only
    Easy to support and maintain

Elastic Container Service 
  https://d1.awsstatic.com/whitepapers/DevOps/running-containerized-microservices-on-aws.pdf
  https://12factor.net/

  Containers
    What are Containers? SImilar to a virtual machine, more like a virtual operating environment
    Standardized: A standardized unit with everything the software needs to run: libraries, system tools, code, runtime
    Microservices: Applications are created using independent stateless components or microservices running in containers

  Architecture of a Docker Container
      [
      Code
      libraries
      Virtual Kernel
      ] * Scale these out as app grow
    Runs on Docker
    Installed on OS

  Advantages of Containers & Microservices Architectures
    Highly Scalable: If the application becomes over loaded, scale only the services you need to.
    Fault Tolerant: A single error in one of your containers shouldn't bring down the entire app
    Easy to maintain: Easier to maintain, update and change than large monolithic applications

  What about ECS? 
    A container orchestration service which supports Docker and windows containers
      Quickly deploy and scale containerized workloads wihtout having to install, configure, manage and scale your own orchestration platform.
      Similar to Kubernetes (k8s) but with deep integration with AWS Services

  Fargate or EC2
    Clusters of Virtual machines: ECS will run your containers on clusters of virtual machines.
    Fargate for Serverless: Use fargate for serverless contaienrs and you don't need to worry about the underlying EC2 instances
    EC2 For more Control: If you want to control the installation, configuration and management of your compute environment.

  Elastic Container Registry: Registry of container images
    Cool services which use ECS: 
      Sagemaker, quickly dpeloy and scale machine learning models
      Amazon Lex, Uses deep learning to build conversational interfaces (chatbots)
      Aamzon.com, amazon's recommendation services uses ECS

  Exam Tips
    Containers: Virtual operating environment which contains everything the software needs to run
      Libraries, system tools, code, runtime
      Alows applications to be built as microservices
    ECS: 
      Container orchestration
      Fargate (Serverless) or Virtual Machines (EC2)

      ECR: Elastic Container Registry

Docker and CodeBuild Demo
  Docker Recap
    Open Source technology which allows you to create applications based on either LInux or Windows contaienrs
    Container: A lightweight standalone executable software package which includes everything the software needs to run in the CloudFormation
  CodeBuild: 
    A fully managed build service:
      Runs a set of commands that you define
      Compiles code, runs tests, and produces artificats that are ready to deploy
    
  Architecture Overview:
    Docker - local
      Dockerfile
      buildspec.YAML
    CodeCommit - repository for source code
    ECS & ECR (Store images)

    Manually build docker and push to ECR
    Then, run Docker on ECS

    CodeBuild will then take place of locally building the container

    1. Install Docker
    2. Create Docker Image

  Exam Tips:

Deploying Docker Using Elastic Beanstalk
  Elastic Beanstalk & Docker Containers
    Elastic Beanstalk supports the deployment of Docker Containers
    Docker Containeras are self-contained and include all the configuration information and software your web application requires to run
    Elastic Beanstalk handles the capacity provisioning, load balancing, scaling, and appliation health monitoring

  Single Docker Container: You can either run a single docker docntianer on an EC2 instance provisioned by Elastic Beanstalk
  Multiple Docker Containers: Use Elastic Beanstalk to build an ECS cluster and deploy multiple Docker containers on each instance
  Deploy your code: UPpoad a zip file containing your code and EB will do the rest
  Upgrade code: Just upload the next version of the code.

Introduction to CloudFormation
  Manage, configure, and provision your AWS infrastructure as code
    Resources are defined using a CloudFormation template.
    CloudFormation interprets the template and makes the appropriate API calls to create the resourcs you have defined.
    Supports YAML or JSON
  
  CloudFormation Benefits
    Consistent: INfrastructure is provisioned consistently, with fewer mistakes
    Quick and Efficient: Less time and effort than configuring things manually.
    Version Control: You can version contorl and peer review your templates
    Free to Use: Free to use but you are charged for the AWS resources you create using CloudFormation
    Manage Updates: Can be used to managed updates and dependencies
    Rolling Back: You can roll back to a previous sstate and delete the entire stack as well.

  CloudFormation Process
    YAML or JSON: YAML or JSON template used to describe the end state of the infrastructure you are either provisioning or changing.
    S3: After creating the template, you upload it to CloudFormation using S3.
    API Calls: CloudFormation reads the template and makes the API calls on your behalf
    CloudFormation Stack: The resulting set of resources that CloudFormation buidls from your template is called a "stack"

  The Resource section is the only mandatory section of the template.
  The transform section is for referencing additional code

  Exam Tips
    Infrastructure as code: YAML or JSON
    Parameters: Input custom values
    Conditions: Provision resources based on environment
    Resources: mandatory, defines AWS resources
    Mappings: Allows you to create custom mappings like REGION
    Transform: Allows you to reference code in S3

  Demo: 

CloudFormation and SAM
  Serverless Application Model (SAM)
    CloudFormation for Serverless
      The Serverless Application Model (SAM) is an extension to CloudFormation used to define serverless applications
    Simplified Syntax
      SAM uses a simplified syntax for defining serverless resources: APIs, Lambda functions, DynamoDB tables, etc.
    SAM CLI
      Use the SAM CLI to package your deployment code, upload it to S3 and deploy your Serverless application.

    Commands:
      sam package --template-file ./mytemplate.yml --output-template-file sam-template.yml --s3-bucket s3-bucket-name
      sam deploy --template-file sam-template.yml --stack-name mystack --capabilities CAPABILITY_IAM

    Exam tips: 
      SAM = Serverless Application Model
      Define and provision serverless applications using CloudFormation
      Has its own api
      sam package: Pacakges your application and uploads to S3
      sam deploy: Deploy your serverless app using CloudFormation
      
  Demo: 
    Install the AWS SAM CLI on yuor local machine
    Create an S3 bucket
    Use sam package to package our code and save it in S3
    Use sam deploy to deploy your code from S3

  Nested Stacks
    Enable re-use of CloudFormation code for common use cases.
      E.g. standard configuration for a load balancer, web server, or application server.
      Instead of copying out the code each time, create a standard template for each common use case and reference from within your CloudFormation template.

Developer Theory Summary
  CodeCommit: Source control service
  CodeBuild: Automated build service, compiles source code and runs tests
  CodeDeploy: Automated deployment service to EC2 and Lambda, as well as on prem
  CodePipeline: Manage build and deploy flow

  CI/CD: 
    Continuous Integration: Merging code frequently, at least once per day
    Continuous Delivery: automated build test and deploy: Think codebuild and codedeploy
    Continuous Deployment: Fully automating release process, think codepipeline

  Read CI/CD Whitepaper

  CodeCommit: Centralized Code Repo
    Enables collaboration
    Version Control

  CodeDeploy
    In-Place Deployment
      Capacity is reduced during the deployment
      Lambda is not supported
      Rolling back involves a re-deploy
      Great when deploying for the first time
    Blue-Green Deploy (Safest option)
      NO capacity reduction
      Green instances can be created ahead of time
      Easy to switch between old and new
      Pay for 2 environments, until you terminate the old version
    
    AppSpec File: Configuration file
      Defines paramaters to be used by codedeploy, os, hooks
      Must be in the root folder
      Repo:
        appspec.yml
        /Scripts
        /Config
        /Source

      Hooks: Lifecycle event hooks have a very specific run order
        In-Place Deployment has 3 phases
          1. De-registering with a load balancer
          2. Installation
          3. Re-registering with a load balancer
        Logical Flow: Understand the flow

        BeforeInstall
        AfterInstall
        ApplicationStart
        ValidateService

  CodePipeline
    Continuous Integration/Continuous Delivery Service: orchestrates you end-to-end software release process based on a workflow you define.
    Automated: Triggers you pipeline as soon as a change is detected in your source code repository.
    Integrates with AWS & Third party tools

  Elastic Container Service 
    Containers: Virtual operating environement with everything the software needs to run

    ECS: Can run your containers on clusters of virtual machines
    Fargate: Serverlessly, run containers
    EC2: More control
    ECR: Elastic container registry, store your containers

    Docker COmmands: 
      docker build -t NAME .
      docker tag myimagename:latest ..tag..
      docker push ..tag..

  CodeBuild:
    Use buildspec.yml to define the build commands and setting used by CodeBuild to run your build
    You can overrie settings by adding your own commands in the console.
    Troubleshooting Failurse: Check codebuild logs

  Elastic Beanstalk and Docker:
    EC2: You can deploy to a single EC2 instance
    ECS Cluster: You can deploy multiple Docker instances to an ECS cluster
    Deploying Docker: Just upload code bundle to Elastic Beanstalk
    Upgrading: Just upload and deploy your new version
    Local Machine or S3 can be used to upload code
    CodeCommit: You can also use code commit

  CloudFormation:
    Infrastructure as Code: YAML or JSON code
    Parameters: Allows you to input cusotm values
    Conditions: Allows you to provision resources according to the environment
    Resources (Mandatory): Describes AWS resources
    Mappings: Allows you to create custom mappings like Region
    Transform: Reference code located in S3 

  Serverless Application Model:
    Used to define and provision serverless applications using CloudFormation

    sam package: Packages your application and uploads to S3
    sam deploy: Deploy your application using CloudFormation

  CloudFormation Nested Stacks:
    NEsted stacks allows you to re-use your CloudFormation code so you don't need to copy / paste every time

    Common use cases: Really useful for frequently used configurations: load balancers, web or application servers

    Stack Resource Type: Reference it in the Resources section of the CloudFormation template using the Stack resource type

  


